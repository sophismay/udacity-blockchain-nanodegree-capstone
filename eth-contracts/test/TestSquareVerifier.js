// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require('Verifier');
const Proof = require("../../zokrates/code/square/proof.json");


contract('TestSquareVerifier', (accounts) => {
    const account_one = accounts[0];
    const correct_inputs = Proof.inputs;
    const proof_values = Object.values(Proof.proof);

    describe('test verification ', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new({from: account_one});
        })
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('should use proof for correct verification', async function () {
            let result = await this.contract.verifyTx.call(proof_values[0], proof_values[1], proof_values[2], correct_inputs);
            assert.equal(result, true, "Wrong verification");
        })

        // Test verification with incorrect proof
        it('should use proof for wrong verification', async function () {
            let result = await this.contract.verifyTx.call(proof_values[0], proof_values[1], proof_values[2], correct_inputs.reverse());
            assert.equal(result, false, "Correct verification");
        })
    });
});
    
